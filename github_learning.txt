Gib learning.

1.创建版本库
$ mkdir learngit
$ cd learngit
$ pwd

通过git init命令把这个目录变成Git可以管理的仓库：

	$ git init

	第一步，用命令git add告诉Git，把文件添加到仓库 
		git add readme.txt
	第二步，用命令git commit告诉Git，把文件提交到仓库：
		git commit -m "wrote a readme file"
		简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
		为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
			$ git add file1.txt
			$ git add file2.txt file3.txt
			$ git commit -m "add 3 files."
			
2.远程库

登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库

根据GitHub的提示，在本地的learngit仓库下运行命令：
	git remote add origin git@github.com:qinzhou1129/learngit.git

把本地库的所有内容推送到远程库上:
	git push -u origin master

从现在起，只要本地作了提交，就可以通过命令：
	git push origin master

从远程库克隆
	git clone https://github.com/qinzhou1129/gitskills.git

3. 附录- 生成新 SSH 密钥并添加到 ssh-agent

生成新 SSH 密钥
	ssh-keygen -t rsa -b 4096 -C "qxz142130@utdallas.edu"
后台启动 ssh 代理
	eval "$(ssh-agent -s)"
	ssh-add ~/.ssh/id_rsa

将 SSH 密钥添加到 GitHub 帐户
	click your profile photo, then click Settings.In the user settings sidebar, click SSH and GPG keys.
	单击 New SSH key（新 SSH 密钥）或 Add SSH key（添加 SSH 密钥）
	在 "Title"（标题）字段中，为新密钥添加描述性标签。 例如，如果您使用的是个人 Mac，此密钥名称可能是 "Personal MacBook Air"。	

将 SSH 密钥复制到剪贴板。
	pbcopy < ~/.ssh/id_rsa.pub
	
将密钥粘贴到 "Key"（密钥）字段	
单击 Add SSH key（添加 SSH 密钥）。

4.时光机穿梭
	1. 版本退回和前进
		查看版本
		git log		命令显示从最近到最远的提交日志，我们可以看到3次提交
		git reflog	用来记录你的每一次命令， 更多次修改
		修改版本
		git reset --hard 16cc5   指定回到过去或者返回撤销掉的某个版本
					版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
	2. 工作区和暂存区
		工作区：在电脑里能看到的目录， 上面进行的新的修改，尚未上传到版本库。
			git status    用该命令查看工作区内容状态，Untracked代表文件还从来没有被添加过。
		暂存区：英文叫stage, 或index
		应用
		1. git add	把文件添加进去，实际上就是把文件修改添加到暂存区；
		2. git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支
		每次修改，如果不用git add到暂存区，那就不会加入到commit中
	3.撤销修改
		git checkout -- file可以丢弃工作区的修改
				令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
				一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
				一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	4.删除文件
		rm test.txt
		1.要从版本库中删除该文件，那就用命令git rm删掉，并且git commit			
				git rm test.txt
				git commit -m "remove test.txt"
		2.删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本
				git checkout -- test.txt
5.分支管理
	1.创建与合并分支
		查看分支：git branch
		创建分支：git branch <name>
		切换分支：git checkout <name>或者git switch <name>
		创建+切换分支：git checkout -b <name>或者git switch -c <name>
		合并某分支到当前分支：git merge <name>
		删除分支：git branch -d <name>
		例子：
			git branch dev		创建分支
			git switch dev		切换分支
			git branch			查看分支  当前分支前面会标一个*号
			git add readme.txt  git commit -m "branch test" 添加文件到分支
			git switch master	切换回master分支
			git merge --no-ff -m dev		把dev分支的工作成果合并到master分支上 
											加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
			git branch -d dev	删除dev分支  -D 强行删除
	2，冲突
			自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
			解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
			用git log --graph命令可以看到分支合并图
	3.多人协作
			git remote -v	查看远程库的信息
			git push origin <branch-name>   推送自己的修改
			git pull	如果推送失败，则因为远程分支比你的本地更新,试图合并
			如果合并有冲突，则解决冲突，并在本地提交
			再用git push origin <branch-name>推送就能成功